-
    pk: 1
    model: desk.exercise
    fields:
        user: 10
        slug: "variables"
        name: "Variables"
        text: |
            In Python, you don't have to declare variables before you use them. Just assign a value to a name, and you have a variable. Here's x with a value of 12:
                
                x = 12
                
            Create y with a value of 13:
        check: |
            def check(t, c):
                with c.expect("You should have a variable named y."):
                    names = t.names()
                    c.test(names, "You have no variables.")
                    if 'y' not in names:
                        if len(names) == 1:
                            c.fail("You have a variable named %s." % names[0])
                        else:
                            c.fail("You have variables named %s." % (", ".join(names)))
                y = t.module.y
                with c.expect("y should be 13."):
                    c.test(y == 13, "Your y is %r." % y)
        solution: |
            y = 13
-
    pk: 2
    model: desk.exercise
    fields:
        user: 10
        slug: "lists"
        name: "Lists"
        text: |
            Lists in Python can hold many values called elements. You create them with square brackets and commas:
            
                my_list = [1, 2, 3, 99]
                
            Create a list called my_list here, make it have five numbers in it, some smaller than 10, and some larger than 10:
        check: |
            def check(t, c):
                with c.expect("""You should have a list named "my_list"."""):
                    names = t.names()
                    c.test(names, 'You have no variables.')
                    if "my_list" not in names:
                        if len(names) > 1:
                            c.fail('You have these variables: %s.' % (", ".join(sorted(names)),))
                        else:
                            c.fail('You have this variable: %s' % names[0])
                    my_list = t.module.my_list
                    c.test(isinstance(my_list, list),
                        "Your my_list isn't a list, instead it's %s" % type(my_list).__name__
                        )
                with c.expect('''"my_list" should have 5 elements, all numbers.'''):
                    c.test(len(my_list) == 5, 'Your "my_list" has %d elements.' % len(my_list))
                    c.test(all(isinstance(x, int) for x in my_list),
                        "Your my_list has some non-number elements."
                        )
                with c.expect('''There should be a number smaller than 10.'''):
                    c.test(any(x < 10 for x in my_list))
                with c.expect('''There should be a number greater than 10.'''):
                    c.test(any(x > 10 for x in my_list))
        solution: |
            my_list = [1, 2, 3, 4, 17]
-
    pk: 3
    model: desk.exercise
    fields:
        user: 10
        slug: "functions"
        name: "Functions"
        text: |
            Functions are created with the `def` keyword. Here's a function that squares its argument:
            
                def square(x):
                    return x * x
                    
            This is fine, I'm sure:<script>alert('danger');</script>
            
            Define a function called average that returns the average of an array of integers. 
            Use int division to produce the final average.
            
            * average([1, 2, 3, 4, 5, 6, 7]) returns 4
            * average([1]) returns 1
            * average([-2, 0, -2]) returns 0
        check: |
            def check(t, c):
                c.function_returns(t.module, "average", [
                    ([1, 2, 3, 4, 5, 6, 7],     4),
                    ([1],                       1),
                    ([3, 5],                    4),
                    ([-2, 0, 2],                0),
                    ])
        solution: |
            def average(nums):
                return sum(nums)//len(nums)
-
    pk: 10
    model: desk.exercise
    fields:
        user: 11
        slug: "otherexercise"
        name: "Other Exercise"
        text: |
            This is an exercise by another author.
        check: |
            def check(t, c):
                pass
        solution: |
